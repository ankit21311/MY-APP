"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/summarize";
exports.ids = ["pages/api/summarize"];
exports.modules = {

/***/ "(api)/./pages/api/summarize.js":
/*!********************************!*\
  !*** ./pages/api/summarize.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { url  } = req.body;\n    if (!url) {\n        return res.status(400).json({\n            error: \"URL is required\"\n        });\n    }\n    try {\n        const summary = await getSummaryFromJinaAI(url);\n        return res.status(200).json({\n            summary\n        });\n    } catch (error) {\n        console.error(\"Error generating summary:\", error);\n        try {\n            const urlObj = new URL(url);\n            const domain = urlObj.hostname.replace(\"www.\", \"\");\n            const siteName = domain.split(\".\")[0];\n            const capitalizedSite = siteName.charAt(0).toUpperCase() + siteName.slice(1);\n            const pathParts = urlObj.pathname.split(\"/\").filter(Boolean);\n            let contextHint = \"\";\n            if (pathParts.length > 0) {\n                const lastPath = pathParts[pathParts.length - 1].replace(/[-_]/g, \" \").trim();\n                if (lastPath && lastPath.length > 3 && !/^\\d+$/.test(lastPath)) {\n                    contextHint = ` about \"${lastPath.charAt(0).toUpperCase() + lastPath.slice(1)}\"`;\n                }\n            }\n            return res.status(200).json({\n                summary: `Summary temporarily unavailable. This is content from ${capitalizedSite}${contextHint}.`\n            });\n        } catch  {\n            return res.status(200).json({\n                summary: \"Summary temporarily unavailable. Please check the original content.\"\n            });\n        }\n    }\n}\nasync function getSummaryFromJinaAI(url) {\n    try {\n        let targetUrl = url.replace(/^https?:\\/\\//, \"\");\n        const encodedTarget = encodeURIComponent(targetUrl);\n        const response = await fetch(`https://r.jina.ai/http://${encodedTarget}`, {\n            method: \"GET\",\n            headers: {\n                Accept: \"text/plain\"\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`API responded with status: ${response.status}`);\n        }\n        const summary = await response.text();\n        if (!summary || summary.trim().length < 10) {\n            throw new Error(\"Received empty or too short summary\");\n        }\n        let trimmed = summary.trim();\n        if (trimmed.length > 500) {\n            const sentences = trimmed.match(/[^.!?]+[.!?]+/g) || [];\n            trimmed = sentences.length > 3 ? sentences.slice(0, 3).join(\" \") : trimmed.slice(0, 500) + \"...\";\n        }\n        return trimmed;\n    } catch (error) {\n        console.error(\"Error calling Jina AI:\", error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TSxHQUFHLEtBQUs7WUFDeEIsTUFBTWUsWUFBWUQsUUFBUUUsS0FBSyxDQUFDLHFCQUFxQixFQUFFO1lBQ3ZERixVQUFVQyxVQUFVZixNQUFNLEdBQUcsSUFBSWUsVUFBVXJCLEtBQUssQ0FBQyxHQUFHLEdBQUd1QixJQUFJLENBQUMsT0FBT0gsUUFBUXBCLEtBQUssQ0FBQyxHQUFHLE9BQU8sS0FBSztRQUNsRyxDQUFDO1FBRUQsT0FBT29CO0lBQ1QsRUFBRSxPQUFPcEMsT0FBTztRQUNkSyxRQUFRTCxLQUFLLENBQUMsMEJBQTBCQTtRQUN4QyxNQUFNQSxNQUFNO0lBQ2Q7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2xpbmstc2F2ZXIvLi9wYWdlcy9hcGkvc3VtbWFyaXplLmpzPzc0YzAiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXEsIHJlcykge1xyXG4gIGlmIChyZXEubWV0aG9kICE9PSAnUE9TVCcpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IGVycm9yOiAnTWV0aG9kIG5vdCBhbGxvd2VkJyB9KTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHsgdXJsIH0gPSByZXEuYm9keTtcclxuICBpZiAoIXVybCkge1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAwKS5qc29uKHsgZXJyb3I6ICdVUkwgaXMgcmVxdWlyZWQnIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHN1bW1hcnkgPSBhd2FpdCBnZXRTdW1tYXJ5RnJvbUppbmFBSSh1cmwpO1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgc3VtbWFyeSB9KTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2VuZXJhdGluZyBzdW1tYXJ5OicsIGVycm9yKTtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCB1cmxPYmogPSBuZXcgVVJMKHVybCk7XHJcbiAgICAgIGNvbnN0IGRvbWFpbiA9IHVybE9iai5ob3N0bmFtZS5yZXBsYWNlKCd3d3cuJywgJycpO1xyXG4gICAgICBjb25zdCBzaXRlTmFtZSA9IGRvbWFpbi5zcGxpdCgnLicpWzBdO1xyXG4gICAgICBjb25zdCBjYXBpdGFsaXplZFNpdGUgPSBzaXRlTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHNpdGVOYW1lLnNsaWNlKDEpO1xyXG5cclxuICAgICAgY29uc3QgcGF0aFBhcnRzID0gdXJsT2JqLnBhdGhuYW1lLnNwbGl0KCcvJykuZmlsdGVyKEJvb2xlYW4pO1xyXG4gICAgICBsZXQgY29udGV4dEhpbnQgPSAnJztcclxuICAgICAgaWYgKHBhdGhQYXJ0cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgbGFzdFBhdGggPSBwYXRoUGFydHNbcGF0aFBhcnRzLmxlbmd0aCAtIDFdLnJlcGxhY2UoL1stX10vZywgJyAnKS50cmltKCk7XHJcbiAgICAgICAgaWYgKGxhc3RQYXRoICYmIGxhc3RQYXRoLmxlbmd0aCA+IDMgJiYgIS9eXFxkKyQvLnRlc3QobGFzdFBhdGgpKSB7XHJcbiAgICAgICAgICBjb250ZXh0SGludCA9IGAgYWJvdXQgXCIke2xhc3RQYXRoLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbGFzdFBhdGguc2xpY2UoMSl9XCJgO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgICBzdW1tYXJ5OiBgU3VtbWFyeSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZS4gVGhpcyBpcyBjb250ZW50IGZyb20gJHtjYXBpdGFsaXplZFNpdGV9JHtjb250ZXh0SGludH0uYCxcclxuICAgICAgfSk7XHJcbiAgICB9IGNhdGNoIHtcclxuICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoMjAwKS5qc29uKHtcclxuICAgICAgICBzdW1tYXJ5OiAnU3VtbWFyeSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZS4gUGxlYXNlIGNoZWNrIHRoZSBvcmlnaW5hbCBjb250ZW50LicsXHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0U3VtbWFyeUZyb21KaW5hQUkodXJsKSB7XHJcbiAgdHJ5IHtcclxuICAgIGxldCB0YXJnZXRVcmwgPSB1cmwucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC8vLCAnJyk7XHJcbiAgICBjb25zdCBlbmNvZGVkVGFyZ2V0ID0gZW5jb2RlVVJJQ29tcG9uZW50KHRhcmdldFVybCk7XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9yLmppbmEuYWkvaHR0cDovLyR7ZW5jb2RlZFRhcmdldH1gLCB7XHJcbiAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgIGhlYWRlcnM6IHsgQWNjZXB0OiAndGV4dC9wbGFpbicgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBUEkgcmVzcG9uZGVkIHdpdGggc3RhdHVzOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdW1tYXJ5ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xyXG4gICAgaWYgKCFzdW1tYXJ5IHx8IHN1bW1hcnkudHJpbSgpLmxlbmd0aCA8IDEwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVjZWl2ZWQgZW1wdHkgb3IgdG9vIHNob3J0IHN1bW1hcnknKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdHJpbW1lZCA9IHN1bW1hcnkudHJpbSgpO1xyXG4gICAgaWYgKHRyaW1tZWQubGVuZ3RoID4gNTAwKSB7XHJcbiAgICAgIGNvbnN0IHNlbnRlbmNlcyA9IHRyaW1tZWQubWF0Y2goL1teLiE/XStbLiE/XSsvZykgfHwgW107XHJcbiAgICAgIHRyaW1tZWQgPSBzZW50ZW5jZXMubGVuZ3RoID4gMyA/IHNlbnRlbmNlcy5zbGljZSgwLCAzKS5qb2luKCcgJykgOiB0cmltbWVkLnNsaWNlKDAsIDUwMCkgKyAnLi4uJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJpbW1lZDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FsbGluZyBKaW5hIEFJOicsIGVycm9yKTtcclxuICAgIHRocm93IGVycm9yO1xyXG4gIH1cclxufVxyXG4iXSwibmFtZXMiOlsiaGFuZGxlciIsInJlcSIsInJlcyIsIm1ldGhvZCIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsInVybCIsImJvZHkiLCJzdW1tYXJ5IiwiZ2V0U3VtbWFyeUZyb21KaW5hQUkiLCJjb25zb2xlIiwidXJsT2JqIiwiVVJMIiwiZG9tYWluIiwiaG9zdG5hbWUiLCJyZXBsYWNlIiwic2l0ZU5hbWUiLCJzcGxpdCIsImNhcGl0YWxpemVkU2l0ZSIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJwYXRoUGFydHMiLCJwYXRobmFtZSIsImZpbHRlciIsIkJvb2xlYW4iLCJjb250ZXh0SGludCIsImxlbmd0aCIsImxhc3RQYXRoIiwidHJpbSIsInRlc3QiLCJ0YXJnZXRVcmwiLCJlbmNvZGVkVGFyZ2V0IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicmVzcG9uc2UiLCJmZXRjaCIsImhlYWRlcnMiLCJBY2NlcHQiLCJvayIsIkVycm9yIiwidGV4dCIsInRyaW1tZWQiLCJzZW50ZW5jZXMiLCJtYXRjaCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/summarize.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/summarize.js"));
module.exports = __webpack_exports__;

})();